#@ load("@ytt:data", "data")
#@yaml/text-templated-strings
groups:
#@ for stemcell in data.values.stemcells:
- name: build-(@= stemcell.version @)
  jobs:
  - build-stemcell-(@= stemcell.version @)
  - test-unit-(@= stemcell.version @)
  - build-os-image-(@= stemcell.version @)
  - build-vcloud-esxi-(@= stemcell.version @)
  - build-vsphere-esxi-(@= stemcell.version @)
  - build-openstack-kvm-(@= stemcell.version @)
  - build-google-kvm-(@= stemcell.version @)
#@ if stemcell.include_alicloud:
  - build-alicloud-kvm-(@= stemcell.version @)
#@ end
  - build-azure-hyperv-(@= stemcell.version @)
  - build-aws-xen-hvm-(@= stemcell.version @)
  - build-warden-boshlite-(@= stemcell.version @)
  - bats-(@= stemcell.version @)
  - test-stemcells-(@= stemcell.version @)-ipv4
  - test-stemcells-(@= stemcell.version @)-ipv6
#@ if stemcell.version != "master":
  - aggregate-candidate-stemcells-(@= stemcell.version @)
#@ end
- name: agent-(@= stemcell.version @)
  jobs:
  - bump-bosh-agent-(@= stemcell.version @)
#@ end
- name: automatic-triggers
  jobs:
#@ for stemcell in data.values.stemcells:
  - create-story-periodic-(@= stemcell.version @)
  - create-story-usn-(@= stemcell.version @)
  - check-usn-packages-(@= stemcell.version @)
  - log-low-medium-cves-(@= stemcell.version @)
#@ end
  - notify-of-usn

#@yaml/text-templated-strings
jobs:
#@ for stemcell in data.values.stemcells:
- name: create-story-periodic-(@= stemcell.version @)
  build_log_retention:
    builds: 200
  plan:
  - in_parallel:
    - get: hourly
      trigger: true
    - get: stemcells-index
    - get: bosh-ecosystem-docker-image
    - get: bosh-stemcells-ci
  - file: bosh-stemcells-ci/tasks/periodic-create-story.yml
    image: bosh-ecosystem-docker-image
    params:
      AWS_ACCESS_KEY_ID: ((bosh_usn_and_periodic_aws_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((bosh_usn_and_periodic_aws_secret_access_key))
      BRANCH: (@= stemcell.branch @)
      BUCKET: bosh-stemcell-triggers
      DESCRIPTION: periodic bump
      POINT_ESTIMATE: 1
      PROJECT_ID: ((story_creator_tracker_project_id))
      TOKEN: ((bosh-ecosystem-tracker-token))
    task: create-story

- name: create-story-usn-(@= stemcell.version @)
  serial_groups: [log-cves-(@= stemcell.version @)]
  plan:
  - in_parallel:
    - get: bosh-stemcells-ci
    - get: (@= stemcell.os @)-usn
      trigger: true
    - get: usn-log-(@= stemcell.version @)
  - file: bosh-stemcells-ci/tasks/write-usn-message.yml
    input_mapping:
      usn-log-in: usn-log-(@= stemcell.version @)
      usn-source: (@= stemcell.os @)-usn
    task: commit-usn-information
  - file: bosh-stemcells-ci/tasks/create-story.yml
    params:
      BRANCH: (@= stemcell.branch @)
      DESCRIPTION: ubuntu *security* notice
      PROJECT_ID: ((story_creator_private_tracker_project_id))
      TOKEN: ((bosh-ecosystem-tracker-token))
      POINT_ESTIMATE: 1
    task: create-story
  - file: bosh-stemcells-ci/tasks/write-bump-message.yml
    params:
      MESSAGE_PREFIX: Addresses
    task: write-message
    input_mapping:
      usn: usn-log-(@= stemcell.version @)
  - put: usn-log-(@= stemcell.version @)
    params:
      acl: public-read
      file: usn-log-out/usn-log.json

- name: check-usn-packages-(@= stemcell.version @)
  plan:
  - in_parallel:
    - get: bosh-stemcells-ci
    - get: bosh-linux-stemcell-builder
      resource: bosh-linux-stemcell-builder-(@= stemcell.version @)
    - get: usn-log-(@= stemcell.version @)
      passed:
      - create-story-usn-(@= stemcell.version @)
      trigger: true
  - file: bosh-stemcells-ci/tasks/check-usn-packages.yml
    input_mapping:
      usn-log-in: usn-log-(@= stemcell.version @)
    vars:
      image_os_tag: latest
    params:
      OS: xenial
      ESM_TOKEN: ((esm_token))
    task: check-usn-packages
  - file: bosh-stemcells-ci/tasks/write-bump-message.yml
    params:
      MESSAGE_PREFIX: Addresses
    task: write-message
    input_mapping:
      usn: usn-log-(@= stemcell.version @)
  - put: stemcell-trigger-(@= stemcell.version @)
    params:
      file: message/message.txt

- name: log-low-medium-cves-(@= stemcell.version @)
  serial_groups: [log-cves-(@= stemcell.version @)]
  plan:
  - in_parallel:
    - get: bosh-stemcells-ci
    - get: (@= stemcell.os @)-usn-low-medium
      trigger: true
    - get: usn-log-(@= stemcell.version @)
  - task: commit-usn-information
    file: bosh-stemcells-ci/tasks/write-usn-message.yml
    input_mapping:
      usn-source: (@= stemcell.os @)-usn-low-medium
      usn-log-in: usn-log-(@= stemcell.version @)
  - put: usn-log-(@= stemcell.version @)
    params:
      file: usn-log-out/usn-log.json
      acl: public-read

- name: build-os-image-(@= stemcell.version @)
  plan:
  - get: bosh-stemcells-ci
  - get: bosh-linux-stemcell-builder
    resource: bosh-linux-stemcell-builder-(@= stemcell.version @)
    trigger: true
  - get: version
    params:
      bump: "major"
    resource: os-image-version-(@= stemcell.version @)
  - get: usn-log-(@= stemcell.version @)
  - get: stemcell-trigger-(@= stemcell.version @)
    trigger: true
  - file: bosh-stemcells-ci/tasks/os-images/build.yml
    params:
      OPERATING_SYSTEM_NAME: ubuntu
      OPERATING_SYSTEM_VERSION: (@= stemcell.os @)
      ESM_TOKEN: ((esm_token))
      PPA_SOURCE: ((ppa_source))
      PPA_USERNAME: ((ppa_user.username))
      PPA_PASSWORD: ((ppa_user.password))
      PPA_KEY: ((ppa_key))
      KERNEL_PACKAGES: ((kernel_packages))
    privileged: true
    task: build
    vars:
      image_os_tag: latest
  - params:
      files:
      - os-image/(@= stemcell.os_name @).tgz
      - usn-log-(@= stemcell.version @)/usn-log.json
      rename: (@= stemcell.os_name @)-(@= stemcell.version @).meta4
      options:
        author_email: ci@localhost
        author_name: CI Bot
        message: '[ci skip] bump OS image'
      version: version/version
    put: os-image-tarball-(@= stemcell.version @)
  - params:
      file: version/number
    put: os-image-version-(@= stemcell.version @)

- name: test-unit-(@= stemcell.version @)
  plan:
  - get: bosh-stemcells-ci
  - get: bosh-linux-stemcell-builder
    resource: bosh-linux-stemcell-builder-(@= stemcell.version @)
    trigger: true
    passed:
    - build-os-image-(@= stemcell.version @)
  - get: stemcell-trigger-(@= stemcell.version @)
    passed:
    - build-os-image-(@= stemcell.version @)
    trigger: true
  - get: os-image-tarball
    resource: os-image-tarball-(@= stemcell.version @)
    passed:
      - build-os-image-(@= stemcell.version @)
  - file: bosh-stemcells-ci/tasks/test-unit.yml
    task: test-unit
    privileged: true
  serial: true

- name: build-stemcell-(@= stemcell.version @)
  plan:
  - get: bosh-stemcells-ci
  - get: bosh-linux-stemcell-builder
    passed:
    - test-unit-(@= stemcell.version @)
    resource: bosh-linux-stemcell-builder-(@= stemcell.version @)
    trigger: true
  - get: stemcell-trigger-(@= stemcell.version @)
    passed:
    - test-unit-(@= stemcell.version @)
    trigger: true
  - get: version
    params:
      bump: (@= stemcell.bump_version @)
    resource: version-(@= stemcell.version @)
  - params:
      file: version/number
    put: version-(@= stemcell.version @)
  serial: true

- name: test-stemcells-(@= stemcell.version @)-ipv4
  plan:
  - do:
    - in_parallel:
      - get: version
        passed:
        - build-warden-boshlite-(@= stemcell.version @)
        - build-aws-xen-hvm-(@= stemcell.version @)
        - build-azure-hyperv-(@= stemcell.version @)
        - build-google-kvm-(@= stemcell.version @)
        - build-openstack-kvm-(@= stemcell.version @)
        - build-vsphere-esxi-(@= stemcell.version @)
        - build-vcloud-esxi-(@= stemcell.version @)
        resource: version-(@= stemcell.version @)
        trigger: true
      - get: bosh-stemcells-ci
      - get: bosh-linux-stemcell-builder
        resource: bosh-linux-stemcell-builder-(@= stemcell.version @)
      - get: bosh-deployment
      - get: bosh-cli
      - get: syslog-release
      - get: os-conf-release
      - get: stemcell
        passed:
        - build-vsphere-esxi-(@= stemcell.version @)
        resource: vsphere-esxi-(@= stemcell.version @)
        tags:
        - nimbus
      - get: stemcell-trigger-(@= stemcell.version @)
        passed:
        - build-warden-boshlite-(@= stemcell.version @)
        - build-aws-xen-hvm-(@= stemcell.version @)
        - build-azure-hyperv-(@= stemcell.version @)
        - build-google-kvm-(@= stemcell.version @)
        - build-openstack-kvm-(@= stemcell.version @)
        - build-vsphere-esxi-(@= stemcell.version @)
        - build-vcloud-esxi-(@= stemcell.version @)
        trigger: true
    - params:
        acquire: true
      put: environment
      resource: nimbus-environment
    - do:
      - file: bosh-stemcells-ci/tasks/deploy-director.yml
        tags:
        - nimbus
        task: deploy-director
        params:
          VCENTER_IP: ((nimbus_concourse-testbed-bosh-main_ip))
          VCENTER_USER: ((nimbus_concourse-testbed-bosh-main_user.username))
          VCENTER_PASSWORD: ((nimbus_concourse-testbed-bosh-main_user.password))
          VCENTER_CLUSTER: ((nimbus_concourse-testbed-bosh-main_cluster))
          VCENTER_DC: ((nimbus_concourse-testbed-bosh-main_dc))
          VCENTER_DS: ((nimbus_concourse-testbed-bosh-main_ds))
          VCENTER_RP: ((nimbus_concourse-testbed-bosh-main_rp))
      - attempts: 3
        file: bosh-stemcells-ci/tasks/test-stemcell.yml
        params:
          BOSH_os_name: (@= stemcell.os_name @)
          package: ipv4director
        tags:
        - nimbus
        task: test-stemcell
    ensure:
      do:
      - file: bosh-stemcells-ci/tasks/teardown.yml
        tags:
        - nimbus
        task: teardown
        attempts: 3
      - params:
          release: environment
        put: environment
        resource: nimbus-environment
        attempts: 3
  serial: true

- name: test-stemcells-(@= stemcell.version @)-ipv6
  plan:
  - do:
    - in_parallel:
      - get: version
        passed:
        - build-warden-boshlite-(@= stemcell.version @)
        - build-aws-xen-hvm-(@= stemcell.version @)
        - build-azure-hyperv-(@= stemcell.version @)
        - build-google-kvm-(@= stemcell.version @)
        - build-openstack-kvm-(@= stemcell.version @)
        - build-vsphere-esxi-(@= stemcell.version @)
        - build-vcloud-esxi-(@= stemcell.version @)
        resource: version-(@= stemcell.version @)
        trigger: true
      - get: bosh-stemcells-ci
      - get: bosh-linux-stemcell-builder
        resource: bosh-linux-stemcell-builder-(@= stemcell.version @)
      - get: bosh-deployment
      - get: bosh-cli
      - get: syslog-release
      - get: os-conf-release
      - get: stemcell
        passed:
        - build-vsphere-esxi-(@= stemcell.version @)
        resource: vsphere-esxi-(@= stemcell.version @)
        tags:
        - nimbus
      - get: stemcell-trigger-(@= stemcell.version @)
        passed:
        - build-warden-boshlite-(@= stemcell.version @)
        - build-aws-xen-hvm-(@= stemcell.version @)
        - build-azure-hyperv-(@= stemcell.version @)
        - build-google-kvm-(@= stemcell.version @)
        - build-openstack-kvm-(@= stemcell.version @)
        - build-vsphere-esxi-(@= stemcell.version @)
        - build-vcloud-esxi-(@= stemcell.version @)
        trigger: true
    - params:
        acquire: true
      put: environment
      resource: nimbus-environment
    - do:
      - file: bosh-stemcells-ci/tasks/deploy-director-ipv6.yml
        tags:
        - nimbus
        task: deploy-director-ipv6
        params:
          VCENTER_IP: ((nimbus_concourse-testbed-bosh-main_ip))
          VCENTER_USER: ((nimbus_concourse-testbed-bosh-main_user.username))
          VCENTER_PASSWORD: ((nimbus_concourse-testbed-bosh-main_user.password))
          VCENTER_CLUSTER: ((nimbus_concourse-testbed-bosh-main_cluster))
          VCENTER_DC: ((nimbus_concourse-testbed-bosh-main_dc))
          VCENTER_DS: ((nimbus_concourse-testbed-bosh-main_ds))
          VCENTER_RP: ((nimbus_concourse-testbed-bosh-main_rp))
      - attempts: 1
        file: bosh-stemcells-ci/tasks/test-stemcell.yml
        params:
          BOSH_os_name: (@= stemcell.os_name @)
          package: ipv6director
        tags:
        - nimbus
        task: test-stemcell-ipv6
    ensure:
      do:
      - file: bosh-stemcells-ci/tasks/teardown.yml
        tags:
        - nimbus
        task: teardown
        attempts: 3
      - params:
          release: environment
        put: environment
        resource: nimbus-environment
        attempts: 3
  serial: true

- name: build-warden-boshlite-(@= stemcell.version @)
  plan:
  - in_parallel:
    - get: version
      passed:
      - build-stemcell-(@= stemcell.version @)
      resource: version-(@= stemcell.version @)
      trigger: true
    - get: bosh-stemcells-ci
    - get: stemcell-trigger-(@= stemcell.version @)
      passed:
      - build-stemcell-(@= stemcell.version @)
      trigger: true
    - get: bosh-linux-stemcell-builder
      passed:
      - build-stemcell-(@= stemcell.version @)
      resource: bosh-linux-stemcell-builder-(@= stemcell.version @)
    - get: stemcells-index
    - get: os-image-tarball
      resource: os-image-tarball-(@= stemcell.version @)
      passed:
      - build-os-image-(@= stemcell.version @)
  - attempts: 3
    file: bosh-stemcells-ci/tasks/build.yml
    params:
      HYPERVISOR: boshlite
      IAAS: warden
      OS_NAME: ubuntu
      OS_VERSION: (@= stemcell.os @)
      STEMCELL_BUCKET: ((candidate_stemcell_bucket))
      ESM_TOKEN: ((esm_token))
    privileged: true
    task: create-stemcell
    vars:
      image_os_tag: latest
  - in_parallel:
    - attempts: 3
      params:
        files:
        - stemcell/*.tgz
        rename: "{{.Version}}/warden-boshlite-go_agent.meta4"
        options:
          author_email: ci@localhost
          author_name: CI Bot
          message: 'dev: (@= stemcell.os_name @)'
        version: candidate-build-number/number
      put: warden-boshlite-(@= stemcell.version @)

- name: build-aws-xen-hvm-(@= stemcell.version @)
  plan:
  - in_parallel:
    - get: version
      passed:
      - build-stemcell-(@= stemcell.version @)
      resource: version-(@= stemcell.version @)
      trigger: true
    - get: bosh-stemcells-ci
    - get: stemcell-trigger-(@= stemcell.version @)
      passed:
      - build-stemcell-(@= stemcell.version @)
      trigger: true
    - get: bosh-linux-stemcell-builder
      passed:
      - build-stemcell-(@= stemcell.version @)
      resource: bosh-linux-stemcell-builder-(@= stemcell.version @)
    - get: stemcells-index
    - get: os-image-tarball
      resource: os-image-tarball-(@= stemcell.version @)
      passed:
      - build-os-image-(@= stemcell.version @)
  - attempts: 3
    file: bosh-stemcells-ci/tasks/build.yml
    params:
      HYPERVISOR: xen-hvm
      IAAS: aws
      OS_NAME: ubuntu
      OS_VERSION: (@= stemcell.os @)
      STEMCELL_BUCKET: ((candidate_stemcell_bucket))
      ESM_TOKEN: ((esm_token))
    privileged: true
    task: create-stemcell
    vars:
      image_os_tag: latest
  - in_parallel:
    - attempts: 3
      params:
        files:
        - stemcell/*.tgz
        rename: "{{.Version}}/aws-xen-hvm-go_agent.meta4"
        options:
          author_email: ci@localhost
          author_name: CI Bot
          message: 'dev: (@= stemcell.os_name @)'
        version: candidate-build-number/number
      put: aws-xen-hvm-(@= stemcell.version @)

- name: build-azure-hyperv-(@= stemcell.version @)
  plan:
  - in_parallel:
    - get: version
      passed:
      - build-stemcell-(@= stemcell.version @)
      resource: version-(@= stemcell.version @)
      trigger: true
    - get: bosh-stemcells-ci
    - get: stemcell-trigger-(@= stemcell.version @)
      passed:
      - build-stemcell-(@= stemcell.version @)
      trigger: true
    - get: bosh-linux-stemcell-builder
      passed:
      - build-stemcell-(@= stemcell.version @)
      resource: bosh-linux-stemcell-builder-(@= stemcell.version @)
    - get: stemcells-index
    - get: os-image-tarball
      resource: os-image-tarball-(@= stemcell.version @)
      passed:
      - build-os-image-(@= stemcell.version @)
  - attempts: 3
    file: bosh-stemcells-ci/tasks/build.yml
    params:
      HYPERVISOR: hyperv
      IAAS: azure
      OS_NAME: ubuntu
      OS_VERSION: (@= stemcell.os @)
      STEMCELL_BUCKET: ((candidate_stemcell_bucket))
      ESM_TOKEN: ((esm_token))
    privileged: true
    task: create-stemcell
    vars:
      image_os_tag: latest
  - in_parallel:
    - attempts: 3
      params:
        files:
        - stemcell/*.tgz
        rename: "{{.Version}}/azure-hyperv-go_agent.meta4"
        options:
          author_email: ci@localhost
          author_name: CI Bot
          message: 'dev: (@= stemcell.os_name @)'
        version: candidate-build-number/number
      put: azure-hyperv-(@= stemcell.version @)

- name: build-google-kvm-(@= stemcell.version @)
  plan:
  - in_parallel:
    - get: version
      passed:
      - build-stemcell-(@= stemcell.version @)
      resource: version-(@= stemcell.version @)
      trigger: true
    - get: bosh-stemcells-ci
    - get: stemcell-trigger-(@= stemcell.version @)
      passed:
      - build-stemcell-(@= stemcell.version @)
      trigger: true
    - get: bosh-linux-stemcell-builder
      passed:
      - build-stemcell-(@= stemcell.version @)
      resource: bosh-linux-stemcell-builder-(@= stemcell.version @)
    - get: stemcells-index
    - get: os-image-tarball
      resource: os-image-tarball-(@= stemcell.version @)
      passed:
      - build-os-image-(@= stemcell.version @)
  - attempts: 3
    file: bosh-stemcells-ci/tasks/build.yml
    params:
      HYPERVISOR: kvm
      IAAS: google
      OS_NAME: ubuntu
      OS_VERSION: (@= stemcell.os @)
      STEMCELL_BUCKET: ((candidate_stemcell_bucket))
      ESM_TOKEN: ((esm_token))
    privileged: true
    task: create-stemcell
    vars:
      image_os_tag: latest
  - in_parallel:
    - attempts: 3
      params:
        files:
        - stemcell/*.tgz
        rename: "{{.Version}}/google-kvm-go_agent.meta4"
        options:
          author_email: ci@localhost
          author_name: CI Bot
          message: 'dev: (@= stemcell.os_name @)'
        version: candidate-build-number/number
      put: google-kvm-(@= stemcell.version @)

- name: build-openstack-kvm-(@= stemcell.version @)
  plan:
  - in_parallel:
    - get: version
      passed:
      - build-stemcell-(@= stemcell.version @)
      resource: version-(@= stemcell.version @)
      trigger: true
    - get: bosh-stemcells-ci
    - get: stemcell-trigger-(@= stemcell.version @)
      passed:
      - build-stemcell-(@= stemcell.version @)
      trigger: true
    - get: bosh-linux-stemcell-builder
      passed:
      - build-stemcell-(@= stemcell.version @)
      resource: bosh-linux-stemcell-builder-(@= stemcell.version @)
    - get: stemcells-index
    - get: os-image-tarball
      resource: os-image-tarball-(@= stemcell.version @)
      passed:
      - build-os-image-(@= stemcell.version @)
  - attempts: 3
    file: bosh-stemcells-ci/tasks/build.yml
    params:
      HYPERVISOR: kvm
      IAAS: openstack
      OS_NAME: ubuntu
      OS_VERSION: (@= stemcell.os @)
      STEMCELL_BUCKET: ((candidate_stemcell_bucket))
      ESM_TOKEN: ((esm_token))
    privileged: true
    task: create-stemcell
    vars:
      image_os_tag: latest
  - in_parallel:
    - attempts: 3
      params:
        files:
        - stemcell/*.tgz
        rename: "{{.Version}}/openstack-kvm-go_agent.meta4"
        options:
          author_email: ci@localhost
          author_name: CI Bot
          message: 'dev: (@= stemcell.os_name @)'
        version: candidate-build-number/number
      put: openstack-kvm-(@= stemcell.version @)

- name: build-vsphere-esxi-(@= stemcell.version @)
  plan:
  - in_parallel:
    - get: version
      passed:
      - build-stemcell-(@= stemcell.version @)
      resource: version-(@= stemcell.version @)
      trigger: true
    - get: bosh-stemcells-ci
    - get: stemcell-trigger-(@= stemcell.version @)
      passed:
      - build-stemcell-(@= stemcell.version @)
      trigger: true
    - get: bosh-linux-stemcell-builder
      passed:
      - build-stemcell-(@= stemcell.version @)
      resource: bosh-linux-stemcell-builder-(@= stemcell.version @)
    - get: stemcells-index
    - get: os-image-tarball
      resource: os-image-tarball-(@= stemcell.version @)
      passed:
      - build-os-image-(@= stemcell.version @)
  - attempts: 3
    file: bosh-stemcells-ci/tasks/build.yml
    params:
      HYPERVISOR: esxi
      IAAS: vsphere
      OS_NAME: ubuntu
      OS_VERSION: (@= stemcell.os @)
      STEMCELL_BUCKET: ((candidate_stemcell_bucket))
      ESM_TOKEN: ((esm_token))
    privileged: true
    task: create-stemcell
    vars:
      image_os_tag: latest
  - in_parallel:
    - attempts: 3
      params:
        files:
        - stemcell/*.tgz
        rename: "{{.Version}}/vsphere-esxi-go_agent.meta4"
        options:
          author_email: ci@localhost
          author_name: CI Bot
          message: 'dev: (@= stemcell.os_name @)'
        version: candidate-build-number/number
      put: vsphere-esxi-(@= stemcell.version @)

- name: build-vcloud-esxi-(@= stemcell.version @)
  plan:
  - in_parallel:
    - get: version
      passed:
      - build-stemcell-(@= stemcell.version @)
      resource: version-(@= stemcell.version @)
      trigger: true
    - get: bosh-stemcells-ci
    - get: stemcell-trigger-(@= stemcell.version @)
      passed:
      - build-stemcell-(@= stemcell.version @)
      trigger: true
    - get: bosh-linux-stemcell-builder
      passed:
      - build-stemcell-(@= stemcell.version @)
      resource: bosh-linux-stemcell-builder-(@= stemcell.version @)
    - get: stemcells-index
    - get: os-image-tarball
      resource: os-image-tarball-(@= stemcell.version @)
      passed:
      - build-os-image-(@= stemcell.version @)
  - attempts: 3
    file: bosh-stemcells-ci/tasks/build.yml
    params:
      HYPERVISOR: esxi
      IAAS: vcloud
      OS_NAME: ubuntu
      OS_VERSION: (@= stemcell.os @)
      STEMCELL_BUCKET: ((candidate_stemcell_bucket))
      ESM_TOKEN: ((esm_token))
    privileged: true
    task: create-stemcell
    vars:
      image_os_tag: latest
  - in_parallel:
    - attempts: 3
      params:
        files:
        - stemcell/*.tgz
        rename: "{{.Version}}/vcloud-esxi-go_agent.meta4"
        options:
          author_email: ci@localhost
          author_name: CI Bot
          message: 'dev: (@= stemcell.os_name @)'
        version: candidate-build-number/number
      put: vcloud-esxi-(@= stemcell.version @)

#@ if stemcell.include_alicloud:
- name: build-alicloud-kvm-(@= stemcell.version @)
  plan:
  - in_parallel:
    - get: version
      passed:
      - build-stemcell-(@= stemcell.version @)
      resource: version-(@= stemcell.version @)
      trigger: true
    - get: bosh-stemcells-ci
    - get: stemcell-trigger-(@= stemcell.version @)
      passed:
      - build-stemcell-(@= stemcell.version @)
      trigger: true
    - get: bosh-linux-stemcell-builder
      passed:
      - build-stemcell-(@= stemcell.version @)
      resource: bosh-linux-stemcell-builder-(@= stemcell.version @)
    - get: stemcells-index
    - get: os-image-tarball
      resource: os-image-tarball-(@= stemcell.version @)
      passed:
      - build-os-image-(@= stemcell.version @)
  - attempts: 3
    file: bosh-stemcells-ci/tasks/build.yml
    params:
      HYPERVISOR: kvm
      IAAS: alicloud
      OS_NAME: ubuntu
      OS_VERSION: (@= stemcell.os @)
      STEMCELL_BUCKET: ((candidate_stemcell_bucket))
      ESM_TOKEN: ((esm_token))
    privileged: true
    task: create-stemcell
    vars:
      image_os_tag: latest
  - in_parallel:
    - attempts: 3
      params:
        files:
        - stemcell/*.tgz
        rename: "{{.Version}}/alicloud-kvm-go_agent.meta4"
        options:
          author_email: ci@localhost
          author_name: CI Bot
          message: 'dev: (@= stemcell.os_name @)'
        version: candidate-build-number/number
      put: alicloud-kvm-(@= stemcell.version @)
#@ end

- name: bats-(@= stemcell.version @)
  serial: true
  plan:
  - do:
    - in_parallel:
      - get: stemcell
        passed:
        - build-vsphere-esxi-(@= stemcell.version @)
        resource: vsphere-esxi-(@= stemcell.version @)
        tags:
        - nimbus
        trigger: true
      - get: bosh-cli
      - get: bats
      - get: bosh-deployment
      - get: bosh-stemcells-ci
      - get: main-ruby-go-docker-image
      - get: bosh-linux-stemcell-builder
        passed:
        - build-warden-boshlite-(@= stemcell.version @)
        - build-aws-xen-hvm-(@= stemcell.version @)
        - build-azure-hyperv-(@= stemcell.version @)
        - build-google-kvm-(@= stemcell.version @)
        - build-openstack-kvm-(@= stemcell.version @)
        - build-vsphere-esxi-(@= stemcell.version @)
        - build-vcloud-esxi-(@= stemcell.version @)
        resource: bosh-linux-stemcell-builder-(@= stemcell.version @)
      - get: version
        passed:
        - build-warden-boshlite-(@= stemcell.version @)
        - build-aws-xen-hvm-(@= stemcell.version @)
        - build-azure-hyperv-(@= stemcell.version @)
        - build-google-kvm-(@= stemcell.version @)
        - build-openstack-kvm-(@= stemcell.version @)
        - build-vsphere-esxi-(@= stemcell.version @)
        - build-vcloud-esxi-(@= stemcell.version @)
        resource: version-(@= stemcell.version @)
      - get: stemcell-trigger-(@= stemcell.version @)
        passed:
        - build-warden-boshlite-(@= stemcell.version @)
        - build-aws-xen-hvm-(@= stemcell.version @)
        - build-azure-hyperv-(@= stemcell.version @)
        - build-google-kvm-(@= stemcell.version @)
        - build-openstack-kvm-(@= stemcell.version @)
        - build-vsphere-esxi-(@= stemcell.version @)
        - build-vcloud-esxi-(@= stemcell.version @)
        trigger: true
    - params:
        acquire: true
      put: environment
      resource: nimbus-environment
    - do:
      - task: deploy-director
        file: bosh-stemcells-ci/tasks/deploy-director.yml
        params:
          VCENTER_IP: ((nimbus_concourse-testbed-bosh-main_ip))
          VCENTER_USER: ((nimbus_concourse-testbed-bosh-main_user.username))
          VCENTER_PASSWORD: ((nimbus_concourse-testbed-bosh-main_user.password))
          VCENTER_CLUSTER: ((nimbus_concourse-testbed-bosh-main_cluster))
          VCENTER_DC: ((nimbus_concourse-testbed-bosh-main_dc))
          VCENTER_DS: ((nimbus_concourse-testbed-bosh-main_ds))
          VCENTER_RP: ((nimbus_concourse-testbed-bosh-main_rp))
        tags:
        - nimbus
      - file: bosh-stemcells-ci/tasks/bats/iaas/vsphere/prepare-bats-config.yml

        params:
          STEMCELL_NAME: bosh-vsphere-esxi-ubuntu-(@= stemcell.os @)-go_agent
        tags:
        - nimbus
        task: prepare-bats
      - file: bats/ci/tasks/run-bats.yml
        image: main-ruby-go-docker-image
        tags:
        - nimbus
        task: run-bats
    ensure:
      do:
      - file: bosh-stemcells-ci/tasks/teardown.yml
        tags:
        - nimbus
        task: teardown
        attempts: 3
      - params:
          release: environment
        put: environment
        resource: nimbus-environment
        attempts: 3

#@ if stemcell.version != "master":
- name: aggregate-candidate-stemcells-(@= stemcell.version @)
  serial: true
  plan:
  - in_parallel:
    - get: version
      passed:
      - test-stemcells-(@= stemcell.version @)-ipv4
      - test-stemcells-(@= stemcell.version @)-ipv6
      - bats-(@= stemcell.version @)
      resource: version-(@= stemcell.version @)
      trigger: true
    - get: bosh-stemcells-ci
    - get: bosh-linux-stemcell-builder
      passed:
      - bats-(@= stemcell.version @)
      resource: bosh-linux-stemcell-builder-(@= stemcell.version @)
    - get: stemcells-index
    - get: stemcell-trigger-(@= stemcell.version @)
      passed:
      - test-stemcells-(@= stemcell.version @)-ipv4
      - test-stemcells-(@= stemcell.version @)-ipv6
      - bats-(@= stemcell.version @)
      trigger: true
  - file: bosh-stemcells-ci/tasks/assert-version-aligns.yml
    task: assert-version-aligns
  - file: bosh-stemcells-ci/tasks/publish.yml
    params:
      AWS_ACCESS_KEY_ID: ((aws_lts_stemcell.username))
      AWS_SECRET_ACCESS_KEY: ((aws_lts_stemcell.password))
      COMMIT_PREFIX: candidate
      COPY_KEYS: |
        aws/bosh-stemcell-%s-aws-xen-hvm-ubuntu-(@= stemcell.os @)-go_agent.tgz
        google/bosh-stemcell-%s-google-kvm-ubuntu-(@= stemcell.os @)-go_agent.tgz
        openstack/bosh-stemcell-%s-openstack-kvm-ubuntu-(@= stemcell.os @)-go_agent.tgz
        openstack/bosh-stemcell-%s-openstack-kvm-ubuntu-(@= stemcell.os @)-go_agent-raw.tgz
        warden/bosh-stemcell-%s-warden-boshlite-ubuntu-(@= stemcell.os @)-go_agent.tgz
        vsphere/bosh-stemcell-%s-vsphere-esxi-ubuntu-(@= stemcell.os @)-go_agent.tgz
        vcloud/bosh-stemcell-%s-vcloud-esxi-ubuntu-(@= stemcell.os @)-go_agent.tgz
        azure/bosh-stemcell-%s-azure-hyperv-ubuntu-(@= stemcell.os @)-go_agent.tgz
      FROM_BUCKET_NAME: ((candidate_stemcell_bucket))
      FROM_INDEX: dev
      OS_NAME: ubuntu
      OS_VERSION: (@= stemcell.os @)
      TO_BUCKET_NAME: ((candidate_stemcell_bucket))
      TO_INDEX: candidate
    task: copy-artifacts
  - put: stemcells-index
    params:
      rebase: true
      repository: stemcells-index
#@ end
#@ end

- name: notify-of-usn
  plan:
  - get: (@= stemcell.os @)-usn
    trigger: true
  - config:
      image_resource:
        type: registry-image
        source:
          repository: bosh/main
      inputs:
      - name: (@= stemcell.os @)-usn
      outputs:
      - name: slack-message
      platform: linux
      run:
        args:
        - -c
        - |
          set -exu -o pipefail
          cat <<EOF > template.json
          {
            "attachments": {
              "color": "#ff0000",
                "thumb_url": "http://www.free-icons-download.net/images/lock-icon-66412.png",
                "footer": "USN Notification",
                "footer_icon": "https://i.imgur.com/7H8ZIq1.png",
                "mrkdwn_in": ["fields"],
                "fields": [
                {"title": "Priorities", "short": true, "value": (.priorities | join(", "))},
                {"title": "Date", "short": true, "value": .date},
                {"title": "Description", "short": false, "value": .description},
                {"title": "CVEs", "short": false, "value": (.cves | join("\n"))}
                ]
            }
          }
          EOF
          cat (@= stemcell.os @)-usn/usn.json | jq -r "$(cat template.json)" | tee slack-message/attachments
          cat (@= stemcell.os @)-usn/usn.json | jq -r '"New USN for (@= stemcell.os @): *<\(.url)|\(.title)>*"' | tee slack-message/message
        path: /bin/bash
    task: build-slack-message
  - params:
      attachments_file: slack-message/attachments
      channel: ((usn_notifications_slack_channel_name))
      icon_url: https://i.imgur.com/A0Vlw5t.png
      text_file: slack-message/message
    put: slack-alert

#@ for stemcell in data.values.stemcells:
- name: bump-bosh-agent-(@= stemcell.version @)
  plan:
  - get: bosh-agent
    params:
      skip_download: true
    resource: bosh-agent-(@= stemcell.version @)
    trigger: true
  - get: bosh-stemcells-ci
  - get: bosh-linux-stemcell-builder
    resource: bosh-linux-stemcell-builder-(@= stemcell.version @)
  - file: bosh-stemcells-ci/tasks/bump-bosh-agent.yml
    task: bump
  - params:
      rebase: true
      repository: bosh-linux-stemcell-builder
    put: bosh-linux-stemcell-builder-push-(@= stemcell.version @)
  serial: true
#@ end

resource_types:
- name: registry-image
  type: registry-image
  source:
    repository: concourse/registry-image-resource
    username: ((dockerhub_username))
    password: ((dockerhub_password))
  defaults:
    username: ((dockerhub_username))
    password: ((dockerhub_password))
- name: ami-resource
  type: registry-image
  source:
    repository: pivotalgreenhouse/ami-resource
    tag: latest
- name: github-status
  type: registry-image
  source:
    repository: dpb587/github-status-resource
    tag: master
- name: usn
  type: registry-image
  source:
    repository: bosh/usn-resource
- name: metalink-repository
  type: registry-image
  source:
    repository: dpb587/metalink-repository-resource
- name: slack-notification
  type: registry-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest
- name: gcs-resource
  type: registry-image
  source:
    repository: frodenas/gcs-resource

#@yaml/text-templated-strings
resources:
#@ for stemcell in data.values.stemcells:
- name: warden-boshlite-(@= stemcell.version @)
  source:
    mirror_files:
    - destination: s3://s3.amazonaws.com/((candidate_stemcell_bucket))/warden/{{.Name}}
    options:
      private_key: ((github_stemcells_index_key.private_key))
    filters:
    - repositorypath: "*/warden-boshlite-go_agent.meta4"
    uri: git+ssh://((stemcells_index_uri))//dev/(@= stemcell.os_name @)/
    url_handlers:
    - include:
      - (s3|https)://.*
      options:
        access_key: ((aws_lts_stemcell.username))
        secret_key: ((aws_lts_stemcell.password))
      type: s3
  type: metalink-repository

- name: aws-xen-hvm-(@= stemcell.version @)
  source:
    mirror_files:
    - destination: s3://s3.amazonaws.com/((candidate_stemcell_bucket))/aws/{{.Name}}
    options:
      private_key: ((github_stemcells_index_key.private_key))
    filters:
    - repositorypath: "*/aws-xen-hvm-go_agent.meta4"
    uri: git+ssh://((stemcells_index_uri))//dev/(@= stemcell.os_name @)/
    url_handlers:
    - include:
      - (s3|https)://.*
      options:
        access_key: ((aws_lts_stemcell.username))
        secret_key: ((aws_lts_stemcell.password))
      type: s3
  type: metalink-repository

#@ if stemcell.include_alicloud:
- name: alicloud-kvm-(@= stemcell.version @)
  source:
    mirror_files:
    - destination: s3://s3.amazonaws.com/((candidate_stemcell_bucket))/alicloud/{{.Name}}
    options:
      private_key: ((github_stemcells_index_key.private_key))
    filters:
    - repositorypath: "*/alicloud-kvm-go_agent.meta4"
    uri: git+ssh://((stemcells_index_uri))//dev/(@= stemcell.os_name @)/
    url_handlers:
    - include:
      - (s3|https)://.*
      options:
        access_key: ((aws_lts_stemcell.username))
        secret_key: ((aws_lts_stemcell.password))
      type: s3
  type: metalink-repository
#@ end

- name: azure-hyperv-(@= stemcell.version @)
  source:
    mirror_files:
    - destination: s3://s3.amazonaws.com/((candidate_stemcell_bucket))/azure/{{.Name}}
    options:
      private_key: ((github_stemcells_index_key.private_key))
    filters:
    - repositorypath: "*/azure-hyperv-go_agent.meta4"
    uri: git+ssh://((stemcells_index_uri))//dev/(@= stemcell.os_name @)/
    url_handlers:
    - include:
      - (s3|https)://.*
      options:
        access_key: ((aws_lts_stemcell.username))
        secret_key: ((aws_lts_stemcell.password))
      type: s3
  type: metalink-repository

- name: openstack-kvm-(@= stemcell.version @)
  source:
    mirror_files:
    - destination: s3://s3.amazonaws.com/((candidate_stemcell_bucket))/openstack/{{.Name}}
    options:
      private_key: ((github_stemcells_index_key.private_key))
    filters:
    - repositorypath: "*/openstack-kvm-go_agent.meta4"
    uri: git+ssh://((stemcells_index_uri))//dev/(@= stemcell.os_name @)/
    url_handlers:
    - include:
      - (s3|https)://.*
      options:
        access_key: ((aws_lts_stemcell.username))
        secret_key: ((aws_lts_stemcell.password))
      type: s3
  type: metalink-repository

- name: google-kvm-(@= stemcell.version @)
  source:
    mirror_files:
    - destination: s3://s3.amazonaws.com/((candidate_stemcell_bucket))/google/{{.Name}}
    options:
      private_key: ((github_stemcells_index_key.private_key))
    filters:
    - repositorypath: "*/google-kvm-go_agent.meta4"
    uri: git+ssh://((stemcells_index_uri))//dev/(@= stemcell.os_name @)/
    url_handlers:
    - include:
      - (s3|https)://.*
      options:
        access_key: ((aws_lts_stemcell.username))
        secret_key: ((aws_lts_stemcell.password))
      type: s3
  type: metalink-repository

- name: vsphere-esxi-(@= stemcell.version @)
  source:
    mirror_files:
    - destination: s3://s3.amazonaws.com/((candidate_stemcell_bucket))/vsphere/{{.Name}}
    options:
      private_key: ((github_stemcells_index_key.private_key))
    filters:
    - repositorypath: "(@= stemcell.major_version @)*/vsphere-esxi-go_agent.meta4"
    uri: git+ssh://((stemcells_index_uri))//dev/(@= stemcell.os_name @)/
    url_handlers:
    - include:
      - (s3|https)://.*
      options:
        access_key: ((aws_lts_stemcell.username))
        secret_key: ((aws_lts_stemcell.password))
      type: s3
  type: metalink-repository

- name: vcloud-esxi-(@= stemcell.version @)
  source:
    mirror_files:
    - destination: s3://s3.amazonaws.com/((candidate_stemcell_bucket))/vcloud/{{.Name}}
    options:
      private_key: ((github_stemcells_index_key.private_key))
    filters:
    - repositorypath: "*/vcloud-esxi-go_agent.meta4"
    uri: git+ssh://((stemcells_index_uri))//dev/(@= stemcell.os_name @)/
    url_handlers:
    - include:
      - (s3|https)://.*
      options:
        access_key: ((aws_lts_stemcell.username))
        secret_key: ((aws_lts_stemcell.password))
      type: s3
  type: metalink-repository

- name: os-image-tarball-(@= stemcell.version @)
  source:
    mirror_files:
    - destination: s3://s3.amazonaws.com/((osimage_bucket))/(@= stemcell.version @)/{{.Name}}
    options:
      private_key: ((github_stemcells_index_key.private_key))
    filters:
    - repositorypath: "(@= stemcell.os_name @)-(@= stemcell.version @).meta4"
    uri: git+ssh://((stemcells_index_uri))//os-images
    url_handlers:
    - include:
      - (s3|https)://.*
      options:
        access_key: ((aws_lts_stemcell.username))
        secret_key: ((aws_lts_stemcell.password))
      type: s3
  type: metalink-repository

- name: version-(@= stemcell.version @)
  source:
    access_key_id: ((aws_lts_stemcell.username))
    bucket: ((candidate_stemcell_bucket))
    driver: s3
    initial_version: (@= stemcell.initial_version @)
    key: bosh-stemcell/(@= stemcell.os_name @)/(@= stemcell.version @)-version
    secret_access_key: ((aws_lts_stemcell.password))
  type: semver
- name: os-image-version-(@= stemcell.version @)
  source:
    access_key_id: ((aws_lts_stemcell.username))
    bucket: ((candidate_stemcell_bucket))
    driver: s3
    initial_version: "0.0.0"
    key: os-image/(@= stemcell.os_name @)/(@= stemcell.version @)-version
    secret_access_key: ((aws_lts_stemcell.password))
  type: semver

- name: bosh-linux-stemcell-builder-push-(@= stemcell.version @)
  source:
    branch: (@= stemcell.branch @)
    private_key: ((github_deploy_key_bosh-linux-stemcell-builder.private_key))
    uri: git@github.com:cloudfoundry/bosh-linux-stemcell-builder
  type: git

- name: bosh-linux-stemcell-builder-(@= stemcell.version @)
  source:
    branch: (@= stemcell.branch @)
    ignore_paths:
    - VERSION
    - bosh-stemcell/image-metalinks/ubuntu-trusty.meta4
    - bosh-stemcell/image-metalinks/centos-7.meta4.meta4
    uri: https://github.com/cloudfoundry/bosh-linux-stemcell-builder
  type: git

- name: usn-log-(@= stemcell.version @)
  source:
    access_key_id: ((bosh_usn_and_periodic_aws_access_key_id))
    bucket: bosh-stemcell-triggers
    initial_context_text: ""
    initial_version: '-'
    secret_access_key: ((bosh_usn_and_periodic_aws_secret_access_key))
    versioned_file: (@= stemcell.version @)/usn-log.json
  type: s3

- name: bosh-agent-(@= stemcell.version @)
  type: metalink-repository
  source:
    uri: git+ssh://git@github.com:cloudfoundry/bosh-agent-index.git//
    version: (@= stemcell.agent_metalink_version @)
    mirror_files:
    - destination: s3://s3-external-1.amazonaws.com/((RELEASE_BUCKET_AGENT))/{{.Name}}
    options:
      private_key: ((BOSH_AGENT_INDEX_DEPLOYMENT_PRIVATE_KEY))
    url_handlers:
    - type: s3
      options:
        access_key: ((AWS_S3_BUCKET_ACCESS_KEY))
        secret_key: ((AWS_S3_BUCKET_SECRET_KEY))

- name: stemcell-trigger-(@= stemcell.version @)
  source:
    access_key_id: ((bosh_usn_and_periodic_aws_access_key_id))
    bucket: bosh-stemcell-triggers
    secret_access_key: ((bosh_usn_and_periodic_aws_secret_access_key))
    versioned_file: (@= stemcell.version @)/stemcell-trigger
  type: s3
#@ end

- name: hourly
  source:
    interval: 1h
  type: time
- name: bosh-stemcells-ci
  source:
    branch: master
    uri: https://github.com/cloudfoundry/bosh-stemcells-ci
  type: git
- name: bats
  source:
    branch: master
    uri: https://github.com/cloudfoundry/bosh-acceptance-tests.git
  type: git
- name: main-ruby-go-docker-image
  type: docker-image
  source:
    repository: bosh/main-ruby-go
    tag: master
- name: stemcells-index
  source:
    branch: master
    private_key: ((github_stemcells_index_key.private_key))
    uri: ((stemcells_index_uri))
  type: git
- name: syslog-release
  source:
    repository: cloudfoundry/syslog-release
  type: bosh-io-release
- name: os-conf-release
  source:
    repository: cloudfoundry/os-conf-release
  type: bosh-io-release
- name: bosh-deployment
  source:
    branch: master
    uri: https://github.com/cloudfoundry/bosh-deployment
  type: git
- name: (@= stemcell.os @)-usn-low-medium
  source:
    os: ubuntu-16.04-lts
    priorities:
    - low
    - medium
  type: usn
- name: bosh-cli
  source:
    regexp: alpha-bosh-cli-(.*)-linux-amd64
    bucket: ((bosh_cli_aws_s3_alpha_release_bucket))
    region_name: ((bosh_cli_aws_s3_release_bucket_region))
  type: s3
- name: nimbus-environment
  source:
    branch: master
    pool: nimbus
    private_key: ((github_deployment_key__bosh-cpi-environments))
    uri: git@github.com:pivotal-cf-experimental/bats-concourse-pool.git
  type: pool
- name: (@= stemcell.os @)-usn
  source:
    os: ubuntu-16.04-lts
    priorities:
    - high
    - critical
  type: usn
- name: slack-alert
  source:
    url: ((slack_hook_url))
  type: slack-notification
- name: bosh-ecosystem-docker-image
  type: docker-image
  source:
    repository: bosh/bosh-ecosystem-concourse
    username: ((docker.username))
    password: ((docker.password))
